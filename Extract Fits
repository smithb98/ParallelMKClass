//Extract fits (data)
//version 4 6/24/2020
//Standalone code to extract the needed data from fits files and add it to final output
//also copies the file to the wanted final output
//keeping it seperate ensures that there are no memory issues as running it in run_mkclass
//caused errors due to the amount of memory it was already using before starting this code
//to compile: gcc -o exatrctFits extractFits.c -lcfitsio
//LAMOSTOUTLENGTH to be two chars longer than actual length of line in lamost.out
//MAXLENGTHFITSFILE should be equal to the longest .fits file name + 2
//MAXHALFOUT should be the longest length for the output line of everything after specname.nor
//MAXOBJNAME max length of data coming from fits file keyword OBJNAME
//MAXSIGNALNAME max length of output from SNRG keyword in fits file//MAXLENGTHFITSFILE should be equal t$
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <stdio.h>
#include <stdbool.h>
#include "fitsio.h"
#include <sys/types.h>
#include <sys/wait.h>
int main(int argc, char *argv[])
{
	const int LAMOSTOUTLENGTH = 85,MAXLENGTHFITSFILE = 50, MAXHALFOUT = 50;
	const int MAXOBJNAME = 15, MAXSIGNALNAME = 10;
	char dirname[80],buffer[80],filename[80],tempname[80],extractname[80];
	char Dirname[80],dirfile[80];
	int err,n;
	char *p;
	FILE *in,*out,*input,*output,*mainOut, *finalOut;
	char *batLine, *sentbatch, *outputLine, *command, *finalCommand, *lOut, *spec, *outEnd;
	char *namechar, *signal;
	int currentTask,numTasks, rank, i,j,loopCount = 0, error,w,w2, lines, count = 0, tempv;
	const char letterm = 'm',letterf = 'f', period = '.';
	const char reject[80] = "Spectrum was rejected";
	bool *Continue = (bool*)malloc(sizeof(bool));
	bool exitFlag = false,noSend = false, sentOnce = false, done, name, final,first;
	fitsfile *fitsFile;
	int fitsstatus = 0; //has to be initilized
	float RA, DEC;

	strcpy(dirfile,argv[1]);
	p = strrchr(dirfile,'.');
	n = p-dirfile;
	strncpy(Dirname,dirfile,n);
	Dirname[n] = '\0';
	chdir(Dirname);
	mainOut = fopen("lamost.out", "r");
	sprintf(buffer, "%s.out", Dirname);
	finalOut = fopen(buffer,"w+");
	outputLine = (char*)calloc(LAMOSTOUTLENGTH + 5,sizeof(char));
	namechar = (char*)calloc(MAXOBJNAME, sizeof(char));
	signal = (char*)calloc(MAXSIGNALNAME, sizeof(char));
	spec = (char*)calloc(MAXLENGTHFITSFILE, sizeof(char));
	outEnd = (char*)calloc(MAXHALFOUT, sizeof(char));
	int strlength =  0;
	while(fgets(outputLine,90,mainOut) != NULL)
	{
		strlength = 0;
		//takes the place of calling calloc and free each time to erase contents
		//as doing that causes malloc invalid size errors for no real reason.
		if(sentOnce)
		{
			for(i = 0; i<50;i++)
				spec[i] = NULL;
		}
		done = false; name = false; final = false, first = true;
		j = 0; w =0;
		//goes through line to get spectrum name and saves the rest to outEnd
		for(i =0; i<90;i++)
		{
			if(outputLine[i] == period && name == false)
			{
				fprintf(finalOut,"%s.nor |",spec);
				spec[i] = outputLine[i];
				done = true;
				tempv = i;
				strlength++;
			}
			else if(done && i == tempv + 1)
				spec[i] = 'f';
			else if(done && i == tempv + 2)
				spec[i] = 'i';
			else if(done && i == tempv + 3)
				spec[i] = 't';
			else if(done && i == tempv + 4)
				spec[i] = 's';
			else if(done && i == tempv + 5)
			{
				strlength = strlength + 7;
				name = true; //done getting name
			}
			else if(!done)
			{
				spec[i] = outputLine[i];
				strlength++;
			}
			//need to store the rest of the data
			if(i == strlength   && name==true && done == true)
			{
				outEnd[j] = outputLine[i];
				j++; w++;
				final = true;
				if(j ==49)
				{
					break;
				}
			}
			else if(final == true)
			{
				outEnd[j] = outputLine[i];
				j++;
				//can't remove extra spaces after classification
				//as they aren't actually spaces and trying to limit it doesn't work
			}
		}
		//get data from fits file
		fits_open_file(&fitsFile,spec,READONLY,&fitsstatus);
		fits_get_errstatus(fitsstatus,buffer);
		fits_read_key(fitsFile,TFLOAT,"RA_OBS",&RA,NULL,&fitsstatus);
		fits_get_errstatus(fitsstatus, buffer);
		 //RA should be in hours instead of degrees.  To do that, divide RA in degrees by 15.0.
		RA = RA / 15.0; //puts RA in hours
		fits_read_key(fitsFile,TFLOAT,"DEC_OBS",&DEC,NULL,&fitsstatus); //works
		fits_get_errstatus(fitsstatus, buffer);
		//RA should be in hours instead of degrees.  To do that, divide RA in degrees by 15.0.
		fits_read_key(fitsFile,TSTRING,"OBJNAME",namechar, NULL, &fitsstatus);
		fits_get_errstatus(fitsstatus, buffer);
		fits_read_key(fitsFile,TSTRING,"SNRG", signal, NULL, &fitsstatus);
		fits_get_errstatus(fitsstatus, buffer);
		fits_close_file(fitsFile,&fitsstatus);
		if(strlen(signal) < 6)
		{
			signal[5] = ' ';
			if(strlen(signal) < 5)
			signal[4] = ' ';
		}
		fprintf(finalOut," %f  %f | %s | %s | %s",RA,DEC,namechar,signal,outEnd);
		sentOnce = true;
	}
	free(outputLine);
	free(signal);
	free(namechar);
	free(spec);
	free(outEnd);
	fclose(finalOut);
	//cannot close mainOut or will give a free error
//      fclose(mainOut);
	//rename file to proper name (tar file name.out) and
	//send output to /media/pi/DR5/results
	sprintf(buffer, "cp ./%s.out /media/pi/LAMOST/Results/%s.out", Dirname, Dirname);
	err = system(buffer);
	return(0);
}	
